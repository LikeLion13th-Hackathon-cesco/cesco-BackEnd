services:
  app:
    image: imjuyongp/setbangsari:latest
    ports:
      - "8080:8080"  # 호스트의 8080 포트를 컨테이너의 8080 포트와 매핑
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    command:
      - java -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE} -jar app.jar
      # 실행 명령어: jar 파일을 실행하면서 Spring 프로필 활성화
    depends_on:
      - mysql  # 이 서비스가 mysql이 먼저 실행된 후 시작되도록
    networks:
      - cesco-network  # mysql과 같은 네트워크를 공유

  mysql:
    image: mysql:8.0  # 공식 MySQL 8.0 이미지를 사용
    ports:
      - "3306:3306"  # 호스트와 컨테이너의 MySQL 포트를 매핑
    environment:
      - MYSQL_DATABASE=setbangsari  # 초기 생성될 데이터베이스 이름
      - MYSQL_USER=cesco
      - MYSQL_PASSWORD=cesco07
      - MYSQL_ROOT_PASSWORD=1234  # 루트 계정의 비밀번호
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password
      - --init-connect=SET NAMES utf8mb4
    volumes:
      - mysql-data:/var/lib/mysql
        # MySQL의 데이터 파일을 호스트에 볼륨으로 영구 저장
      # 컨테이너가 삭제돼도 DB 내용은 유지됨
    networks:
      - cesco-network  # Spring과 같은 네트워크 상에 있어서 mysql이라는 호스트 이름으로 접근 가능

networks:
  cesco-network:
    driver: bridge  # Docker 기본 브리지 네트워크를 사용

volumes:
  mysql-data:  # 위에서 정의한 MySQL 데이터를 저장할 볼륨